{"version":3,"sources":["components/node/SaveButton.tsx","components/node/EditButton.tsx","components/AddNodeModal.tsx","context/CRM.tsx","components/node/AddSubSellerButton.tsx","components/node/ConnentionDot.tsx","utils/utils.ts","components/node/Node.tsx","components/node/ExportCSV.tsx","containers/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SaveButton","onSaveHandler","Tooltip","title","IconButton","style","background","width","height","color","onClick","EditButton","AddNodeModal","addNode","useCRMContext","isShowModal","setIsShowModal","overlayHadnler","mousePosition","useMousePosition","useState","x","y","name","totalSales","children","id","inDirectProfits","totalProfits","node","setNode","useEffect","prevState","onCloseHandler","e","stopPropagation","onChangeHandler","target","value","Dialog","zIndex","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","required","placeholder","onChange","fullWidth","DialogActions","Button","trim","Date","now","useStyles","makeStyles","theme","overlay","display","position","mouseTail","fontSize","fontWeight","top","left","cursor","appContainer","minHeight","overflow","CRMContext","createContext","CRMProvider","isShowOverLay","setIsShowOverlay","selectedNode","setSelectedNode","initNode","setInitNode","root","updateRoot","selectedNodeToCalcChildrenProfitsID","setSelectedNodeToCalcChildrenProfitsID","setPosition","classes","Provider","newNode","parent","parentId","onMouseMove","clientX","clientY","className","useContext","AddSubSellerButton","ConnectionDot","forwardRef","bottom","ref","pos","justifyContent","alignItems","borderRadius","backgroundColor","sales","properties","csvHeaders","card","nodeRoot","boxShadow","flexDirection","totalSalesInput","controllersContainer","flex","controllersInnerContainer","addSellerWrapper","right","input","field","Node","isEdit","setIsEdit","seller","setSeller","setInDirectProfits","directProfits","setDirectProfits","setTotalProfits","onChildrenChangeHandler","sum","reduce","acc","child","property","push","axis","defaultPosition","onDrag","data","lastX","lastY","FormControl","paddingTop","marginTop","disabled","variant","onBlur","inputProps","min","padding","Number","toLocaleString","map","viewBox","d","stroke","strokeWidth","fill","onNodeChange","ExportCSV","fetchCSVData","setData","onClickHandler","a","res","marginRight","home","addSellerButton","Home","csvData","assemble","forEach","childInfo","length","err","console","log","state","App","CRM","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4PAuBeA,EAlBV,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACN,OACE,kBAACC,EAAA,EAAD,CAASC,MAAM,iBACb,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRC,MAAO,SAETC,QAAST,GAET,kBAAC,IAAD,S,iBCKOU,EAlBiC,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QACjD,OACE,kBAACR,EAAA,EAAD,CAASC,MAAM,cACb,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRC,MAAO,SAETC,QAASA,GAET,kBAAC,IAAD,S,8DCkGOE,EAzGe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACWC,IAAhDC,EADqC,EACrCA,YAAaC,EADwB,EACxBA,eAAgBC,EADQ,EACRA,eAC7BC,EAAkBC,IAAlBD,cAFqC,EAGrBE,mBAAiB,CACvCC,EAAGH,EAAcG,EACjBC,EAAGJ,EAAcI,EACjBC,KAAM,GACNC,WAAY,EACZC,SAAU,GACVC,GAAI,EACJC,gBAAiB,EACjBC,aAAc,IAX6B,mBAGtCC,EAHsC,KAGhCC,EAHgC,KAc7CC,qBAAU,WACRhB,GACEe,GAAQ,SAAAE,GAAS,kCACZA,GADY,IAEfX,EAAGH,EAAcG,EACjBC,EAAGJ,EAAcI,SAGpB,CAACP,IAEJ,IAaMkB,EAAiB,SAACC,GACtBA,EAAEC,kBACFnB,GAAe,GACfC,IAfAa,EAAQ,CACNT,EAAG,EACHC,EAAG,EACHC,KAAM,GACNC,WAAY,EACZC,SAAU,GACVC,GAAI,EACJC,gBAAiB,EACjBC,aAAc,KAoBZQ,EAAkB,SAACF,GAA4C,IAAD,EAC5CA,EAAEG,OAAhBX,EAD0D,EAC1DA,GAAIY,EADsD,EACtDA,MACZR,GAAQ,SAACE,GAAD,mBAAC,eACJA,GADG,kBAELN,EAAKY,QAIV,OACE,6BACE,kBAACC,EAAA,EAAD,CACElC,MAAO,CAAEmC,OAAQ,aACjBC,KAAM1B,EACN2B,QAAST,EACTU,kBAAgB,qBAEhB,kBAACC,EAAA,EAAD,CAAalB,GAAG,qBAAhB,cACA,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,OAAO,QACPtB,GAAG,OACHuB,MAAM,OACNC,KAAK,OACLC,UAAQ,EACRC,YAAY,iBACZC,SAAUjB,EACVkB,WAAS,IAEX,kBAACR,EAAA,EAAD,CACEE,OAAO,QACPtB,GAAG,aACHuB,MAAM,cACNC,KAAK,SACLE,YAAY,yBACZE,WAAS,EACTD,SAAUjB,KAGd,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ9C,QAASuB,EAAgBxB,MAAM,WAAvC,UAGA,kBAAC+C,EAAA,EAAD,CAAQ9C,QApDS,SAACwB,GACxBA,EAAEC,kBACEN,EAAKN,KAAKkC,SACZ5B,EAAKH,GAAKgC,KAAKC,MACf9C,EAAQgB,GACRI,EAAeC,KA+CwBzB,MAAM,WAAzC,WC9FJmD,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CC,QAAS,CACPC,QAAS,OACTzD,MAAO,OACPC,OAAQ,OACRF,WAAY,kBACZ2D,SAAU,QACVzB,OAAQ,KAEV0B,UAAW,CACTC,SAAU,SACVC,WAAY,OACZH,SAAU,WACVI,IAAK,gBAAGJ,EAAH,EAAGA,SAAH,OAAuBA,GAAYA,EAAS3C,EAAI,IACrDgD,KAAM,gBAAGL,EAAH,EAAGA,SAAH,OAAuBA,GAAYA,EAAS5C,EAAI,IACtDkD,OAAQ,WAEVC,aAAc,CACZC,UAAW,QACXlE,MAAO,OACPC,OAAQ,OACRkE,SAAU,YAIRC,EAAaC,wBAAmB,MAqFvBC,EAnFoB,SAAC,GAAkB,IAAhBpD,EAAe,EAAfA,SAAe,EACTL,oBAAkB,GADT,mBAC5C0D,EAD4C,KAC7BC,EAD6B,OAEb3D,oBAAkB,GAFL,mBAE5CL,EAF4C,KAE/BC,EAF+B,OAGXI,mBAAwB,MAHb,mBAG5C4D,EAH4C,KAG9BC,EAH8B,OAInB7D,qBAJmB,mBAI5C8D,EAJ4C,KAIlCC,EAJkC,OAKxB/D,mBAAiB,CAC1CC,EAAG,EACHC,EAAG,EACHI,GAAI,EACJH,KAAM,OACNC,WAAY,EACZC,SAAU,GACV2D,MAAM,EACNzD,gBAAiB,EACjBC,aAAc,IAdmC,mBAK5CwD,EAL4C,KAKtCC,EALsC,OAoB/CjE,mBAAc,GApBiC,mBAkBjDkE,EAlBiD,KAmBjDC,EAnBiD,OAsBnBnE,mBAAmB,CACjDC,EAAG,EACHC,EAAG,IAxB8C,mBAsB5C2C,EAtB4C,KAsBlCuB,EAtBkC,KA2B7CC,EAAU7B,EAAU,CAAEK,aAmB5B,OACE,kBAACU,EAAWe,SAAZ,CACEpD,MAAO,CACL2B,WACAhD,eArBiB,WACrB8D,GAAkBD,IAqBd/D,cACAC,iBACA8D,gBACAO,aACAJ,kBACAD,eACAE,WACAI,sCACAC,yCACAH,SAGF,kBAAC,EAAD,CAAcvE,QAvBF,SAAC8E,GACf,IAAMC,EAASZ,GAAgBI,EAC/BO,EAAQE,SAAWD,EAAOlE,GAC1ByD,EAAYQ,MAqBV,yBAAKG,YA/Be,SAAC5D,GACvBsD,EAAY,CACVnE,EAAGa,EAAE6D,QACLzE,EAAGY,EAAE8D,WA4B8BC,UAAWR,EAAQjB,cACnDM,GACC,oCACE,yBACEmB,UAAWR,EAAQ1B,QACnBrD,QAAS,SAAAwB,GACPA,EAAEC,kBACFnB,GAAe,MAGnB,yBAAKiF,UAAWR,EAAQvB,WAAxB,MAGHzC,KAQIX,EAAgB,WAAO,IAAD,EAa7BoF,qBAAWvB,GAXb1D,EAF+B,EAE/BA,eACAD,EAH+B,EAG/BA,eAYF,MAAO,CACLC,iBACAF,YAjB+B,EAI/BA,YAcAC,iBACA8D,cAnB+B,EAK/BA,cAeAO,WApB+B,EAM/BA,WAeAJ,gBArB+B,EAO/BA,gBAeAD,aAtB+B,EAQ/BA,aAeAE,SAvB+B,EAS/BA,SAeAI,oCAxB+B,EAU/BA,oCAeAC,uCAzB+B,EAW/BA,uCAeAH,KA1B+B,EAY/BA,OAkBSjE,EAAmB,WAE9B,MAAO,CACLD,cAFmBgF,qBAAWvB,GAAxBV,WC3HKkC,EAzBkC,SAAC,GAAc,IAAZtE,EAAW,EAAXA,KAAW,EACjBf,IAApCG,EADqD,EACrDA,eAAgBgE,EADqC,EACrCA,gBAOxB,OACE,kBAAC/E,EAAA,EAAD,CAASC,MAAM,kBACb,kBAACC,EAAA,EAAD,CACEM,QARiB,SAACwB,GACtBjB,IACAgE,EAAgBpD,IAOZxB,MAAO,CACLC,WAAY,UACZC,MAAO,OACPC,OAAQ,OACRC,MAAO,UAGT,kBAAC,IAAD,SCMO2F,EA7B4CC,sBACzD,YAAsB,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IACHC,EAAMF,EAAS,CAAEA,QAAS,IAAO,CAAEjC,KAAM,IAC/C,OACE,yBACEkC,IAAKA,EACLlG,MAAK,aACHE,MAAO,OACPC,OAAQ,OACRwD,QAAS,OACTyC,eAAgB,SAChBC,WAAY,SACZzC,SAAU,YACPuC,IAGL,yBACEnG,MAAO,CACLE,MAAO,OACPC,OAAQ,OACRmG,aAAc,MACdC,gBAAiB,eCvBhBC,EAA2B,GAA3BA,EAA8C,IAS9CC,EACR,IADQA,EAER,IAFQA,EAGD,WAHCA,EAIE,aAJFA,EAKI,eALJA,EAMQ,kBAGRC,EAAa,CACxB,OACA,cACA,iBACA,mBACA,iBCZMC,EDRA,CACJzG,MAAO,IACPC,OAAQ,KCONoD,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9CmD,SAAU,CACRC,UAAW,8BACX1G,OAAO,GAAD,OAAKwG,EAAKxG,OAAV,MACND,MAAM,GAAD,OAAKyG,EAAKzG,MAAV,MACL0D,SAAU,WACVD,QAAS,OACTmD,cAAe,SACfV,eAAgB,SAChBC,WAAY,SACZpG,WAAY,QACZiE,OAAQ,OACR/B,OAAQ,IACR,WAAY,CACV+B,OAAQ,WACR/B,OAAQ,MAIZ4E,gBAAiB,CACf5G,OAAQ,QAEV6G,qBAAsB,CACpBC,KAAM,EACNtD,QAAS,OACT0C,WAAY,SACZD,eAAgB,SAChBxC,SAAU,WACV1D,MAAO,QAETgH,0BAA2B,CACzBhH,MAAO,MACPyD,QAAS,OACTyC,eAAgB,gBAElBe,iBAAkB,CAChBvD,SAAU,WACVwD,OAAQ,GACRlH,MAAO,OACPC,OAAQ,OACRwD,QAAS,OACTmD,cAAe,SACfV,eAAgB,UAElBiB,MAAO,CACLlH,OAAQ,QAEVmH,MAAO,CACLnH,OAAQ,OACRD,MAAO,OACPyD,QAAS,OACT0C,WAAY,cAqPDkB,EAjPY,SAArBA,EAAsB,GAAc,IAAD,EAAX/F,EAAW,EAAXA,KACtB4D,EAAU7B,IADuB,EAEXxC,oBAAkB,GAFP,mBAEhCyG,EAFgC,KAExBC,EAFwB,OAGX1G,mBAAQ,eAAcS,IAHX,mBAGhCkG,EAHgC,KAGxBC,EAHwB,OAIO5G,mBAAiB,GAJxB,mBAIhCO,EAJgC,KAIfsG,EAJe,OAKG7G,mBACxCS,EAAKL,WAAaqF,GANmB,mBAKhCqB,EALgC,KAKjBC,EALiB,OAQC/G,mBAAiB,GARlB,mBAQhCQ,EARgC,KAQlBwG,EARkB,OAcnCtH,IAHFoE,EAXqC,EAWrCA,SACAI,EAZqC,EAYrCA,oCACAC,EAbqC,EAarCA,uCAaFxD,qBAAU,WACRoG,EAAiBtG,EAAKL,WAAaqF,KAClC,CAAChF,EAAKL,aAGTO,qBAAU,WACRkG,EAAmBpG,EAAKF,mBAEvB,CAACE,EAAKF,kBAGTI,qBAAU,WACRqG,EAAgBF,EAAgBvG,GAChC0G,EACExG,EACAiF,EACAoB,EAAgBvG,KAGjB,CAACA,EAAiBuG,IAGrBnG,qBAAU,WACRsG,EAAwBxG,EAAMiF,EAAqB5B,GACnDK,EAAsC,OAACL,QAAD,IAACA,OAAD,EAACA,EAAUxD,MAEhD,CAACwD,IAGJnD,qBAAU,WACR,GAAIuD,IAAwCzD,EAAKH,GAAI,CACnD,IAAM4G,EAAMzG,EAAKJ,SAAS8G,QAAO,SAACC,EAAKC,GACrC,OAAOD,EAAMC,EAAM7G,aAAeiF,IACjC,GAEHoB,EAAmBK,GACnB/C,EAAuC1D,EAAKgE,UAC5CwC,EAAwBxG,EAAMiF,EAA8BwB,MAG7D,CAAChD,IAKJ,IAgBMrF,EAAgB,WAChB8H,EAAOvG,YAAc,GACvBsG,GAAWD,IAYTQ,EAA0B,SAACxG,EAAW6G,EAAepG,GACzD,OAAQoG,GACN,KAAK5B,GACM,OAALxE,QAAK,IAALA,OAAA,EAAAA,EAAOuD,YAAahE,EAAKH,IAC3BG,EAAKJ,SAASkH,KAAKrG,GAErB,MACF,KAAKwE,EACkB,kBAAVxE,IACTT,EAAKiF,GAA4BxE,GAEnC,MACF,KAAKwE,EACkB,kBAAVxE,IACTT,EAAKiF,GAAgCxE,GAEvC,MACF,KAAKwE,EACHjF,EAAKiF,GAAgBxE,EACrB,MACF,KAAKwE,EACHjF,EAAKiF,GAAgBxE,EACrB,MACF,KAAKwE,EACHjF,EAAKiF,GAA0BxE,IAOrC,OACE,qCACIT,EAAKuD,MACL,kBAAC,IAAD,CACEwD,KAAK,OACLC,gBAAiB,CACfxH,EAAC,OAAEQ,QAAF,IAAEA,OAAF,EAAEA,EAAMR,EACTC,EAAC,OAAEO,QAAF,IAAEA,OAAF,EAAEA,EAAMP,GAEXwH,OAtEO,SAAC5G,EAAQ6G,GACtBV,EAAwBxG,EAAMiF,EAAciC,EAAKC,OACjDX,EAAwBxG,EAAMiF,EAAciC,EAAKE,SAsE3C,yBACEhD,UAAWR,EAAQwB,SACnBvG,QAAS,SAAAwB,GACPA,EAAEC,oBAGHN,EAAKgE,SAAW,kBAAC,EAAD,MAAoB,GACrC,kBAACqD,EAAA,EAAD,CAAa7I,MAAO,CAAE8I,WAAY,SAC/BpB,EAAOxG,KAER,kBAACuB,EAAA,EAAD,CACEzC,MAAO,CAAE+I,UAAW,QACpBC,UAAWxB,EACXyB,QAAQ,WACR5H,GAAG,aACHwB,KAAK,SACLD,MAAM,cACNG,YAAY,oBACZd,MAAK,OAAEyF,QAAF,IAAEA,OAAF,EAAEA,EAAQvG,WACf+H,OArEC,WACbtJ,KAqEYuJ,WAAY,CACVC,IAAK,EACLhE,QAAS,CAAEiC,MAAOjC,EAAQiC,OAC1BrH,MAAO,CAAEG,OAAQ,OAAQkJ,QAAS,iBAEpCrG,SA5FU,SAACnB,GAA4C,IAAD,EAC5CA,EAAEG,OAAhBX,EAD0D,EAC1DA,GAAIY,EADsD,EACtDA,MACZ0F,GAAU,SAAAhG,GAAS,kCACdA,GADc,kBAEhBN,EAAKY,OAERiD,EAAuC1D,EAAKH,IAC5CyG,EAAiBwB,OAAOrH,GAASuE,GACjCwB,EAAwBxG,EAAMiF,EAAwBxE,MAsF5C,yBAAKjC,MAAO,CAAEiH,KAAM,IAClB,yBAAKrB,UAAWR,EAAQkC,OAAxB,2BACuBO,EAAc0B,eAAe,QAEpD,yBAAK3D,UAAWR,EAAQkC,OAAxB,8BAC0BhG,EAAgBiI,eACtC,QAGJ,yBACEvJ,MAAO,CAAE+D,WAAY,QACrB6B,UAAWR,EAAQkC,OAFrB,0BAGqBgC,OAAO/H,GAAcgI,eACxC,UAIN,yBAAK3D,UAAWR,EAAQ4B,sBACtB,yBAAKpB,UAAWR,EAAQ8B,2BACpBM,GAAU,kBAAC,EAAe,CAAE5H,mBAC5B,kBAAC,EAAD,CAAYS,QA7FN,WACpBoH,GAAWD,MA8FC,kBAAC,EAAD,CAAoBhG,KAAMkG,MAG9B,kBAAC,EAAD,CAAezB,QAAQ,MA9D/B,OAkEGzE,QAlEH,IAkEGA,GAlEH,UAkEGA,EAAMJ,gBAlET,aAkEG,EAAgBoI,KAAI,SAAApB,GACnB,OACE,oCACI5G,EAAKuD,KAwBL,GAvBA,yBACE0E,QAAQ,YACRzJ,MAAO,CACLG,OAAQ,OACRD,MAAO,OACP0D,SAAU,QACVzB,OAAQ,EACR6B,IAAK,EACLC,KAAM,IAGR,0BACEyF,EAAC,YAAU,OAAJlI,QAAI,IAAJA,OAAA,EAAAA,EAAMR,GAAI2F,EAAKzG,MAAQ,EAA7B,YAAkCsB,EAAKP,EAAI0F,EAAKxG,OAAhD,cACM,OAALiI,QAAK,IAALA,OAAA,EAAAA,EAAOpH,GAAI2F,EAAKzG,MAAQ,EADzB,YAEGkI,EAAMnH,GACVjB,MAAO,CACL2J,OAAQ,QACRC,YAAa,EACbC,KAAM,WAOd,kBAACtC,EAAD,CACE/F,KAAM4G,EACN0B,aAAc,SAACtI,EAAc6G,EAAkBpG,GAAjC,OACZ+F,EAAwBxG,EAAM6G,EAAUpG,Y,oDCzQzC8H,GA5B6C,SAAC,GAEtD,IADLC,EACI,EADJA,aACI,EACoBjJ,mBAAc,CAAC,KADnC,mBACG2H,EADH,KACSuB,EADT,KAEEC,EAAc,uCAAG,4BAAAC,EAAA,sEACHH,IADG,OACfI,EADe,OAErBH,EAAQG,GAFa,2CAAH,qDAKpB,OACE,kBAAC,WAAD,CAAS1B,KAAMA,EAAMrI,QAAS6J,GAC5B,kBAACrK,EAAA,EAAD,CAASC,MAAM,iBACb,kBAACC,EAAA,EAAD,CACEC,MAAO,CACLC,WAAY,UACZE,OAAQ,OACRD,MAAO,OACPmK,YAAa,SACbjK,MAAO,UAGT,kBAAC,KAAD,CAAiBJ,MAAO,CAAE8D,SAAU,cClBxCP,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9C6G,KAAM,CACJnK,OAAQ,OACRD,MAAO,OACP0D,SAAU,YAEZ2G,gBAAiB,CACf3G,SAAU,QACVI,IAAK,GACLoD,MAAO,GACPjF,OAAQ,WA+DGqI,GA3DF,WAAO,IAAD,EAOb/J,IALFG,EAFe,EAEfA,eACAmE,EAHe,EAGfA,KACAC,EAJe,EAIfA,WACAJ,EALe,EAKfA,gBACAM,EANe,EAMfA,uCAEIE,EAAU7B,KAiChB,OACE,oCACE,yBAAKqC,UAAWR,EAAQkF,MACtB,yBAAK1E,UAAWR,EAAQmF,iBACtB,kBAAC,GAAD,CAAWP,aA3BD,WAChB,IAAIS,EAAe,CAAC/D,GACpB,IAeE,OAdiB,SAAXgE,EAAY3F,GAChBA,EAAK3D,SAASuJ,SAAQ,SAAAvC,GACpB,IAAMwC,EAAiB,CACrBxC,EAAMlH,KACNkH,EAAMjH,WACNiH,EAAMjH,WAAaqF,EACnB4B,EAAM9G,gBACN8G,EAAM7G,cAERkJ,EAAQnC,KAAKsC,GACTxC,EAAMhH,SAASyJ,QAAQH,EAAStC,MAGxCsC,CAAS3F,GACF0F,EACP,MAAOK,GACP,OAAOA,MASH,kBAAC3H,EAAA,EAAD,CACEnD,MAAO,CAAEC,WAAY,SAAUC,MAAO,QACtCG,QAtCsB,SAACwB,GAC/BA,EAAEC,kBACFiJ,QAAQC,IAAIjG,GACZG,EAAuCH,EAAK1D,IAC5CuD,EAAgBG,GAChBnE,MA+BM,eAOF,kBAAC,EAAD,CAAMY,KAAMuD,EAAM+E,aAAc,SAACmB,GAAD,OAAmBjG,EAAWiG,SC5DvDC,OAVf,WACE,OACE,kBAACC,EAAD,KACE,yBAAKvF,UAAU,OACb,kBAAC,GAAD,SCGYwF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.e73b71b3.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { IconButton, Tooltip } from \"@material-ui/core\";\nimport UpdateIcon from \"@material-ui/icons/Update\";\nconst SaveButton: FC<{\n  onSaveHandler: () => void;\n}> = ({ onSaveHandler }) => {\n  return (\n    <Tooltip title=\"Update Seller\">\n      <IconButton\n        style={{\n          background: \"#0E0D0F\",\n          width: \"32px\",\n          height: \"32px\",\n          color: \"white\"\n        }}\n        onClick={onSaveHandler}\n      >\n        <UpdateIcon />\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default SaveButton;\n","import React, { FC } from \"react\";\nimport { IconButton, Tooltip } from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst EditButton: FC<{ onClick: () => void }> = ({ onClick }) => {\n  return (\n    <Tooltip title=\"Edit Sales\">\n      <IconButton\n        style={{\n          background: \"#A3C4B1\",\n          width: \"32px\",\n          height: \"32px\",\n          color: \"white\"\n        }}\n        onClick={onClick}\n      >\n        <EditIcon />\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default EditButton;\n","import React, { useState, FC, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { Seller } from \"../types\";\nimport { useCRMContext, useMousePosition } from \"../context/CRM\";\nconst AddNodeModal: FC<any> = ({ addNode }) => {\n  const { isShowModal, setIsShowModal, overlayHadnler } = useCRMContext();\n  const { mousePosition } = useMousePosition();\n  const [node, setNode] = useState<Seller>({\n    x: mousePosition.x,\n    y: mousePosition.y,\n    name: \"\",\n    totalSales: 0,\n    children: [],\n    id: 0,\n    inDirectProfits: 0,\n    totalProfits: 0\n  });\n\n  useEffect(() => {\n    isShowModal &&\n      setNode(prevState => ({\n        ...prevState,\n        x: mousePosition.x,\n        y: mousePosition.y\n      }));\n    //eslint-disable-next-line\n  }, [isShowModal]);\n\n  const resetNode = () => {\n    setNode({\n      x: 0,\n      y: 0,\n      name: \"\",\n      totalSales: 0,\n      children: [],\n      id: 0,\n      inDirectProfits: 0,\n      totalProfits: 0\n    });\n  };\n\n  const onCloseHandler = (e: any) => {\n    e.stopPropagation();\n    setIsShowModal(false);\n    overlayHadnler();\n    resetNode();\n  };\n\n  const onConfirmHandler = (e: any) => {\n    e.stopPropagation();\n    if (node.name.trim()) {\n      node.id = Date.now();\n      addNode(node);\n      onCloseHandler(e);\n    }\n  };\n\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = e.target;\n    setNode((prevState: Seller) => ({\n      ...prevState,\n      [id]: value\n    }));\n  };\n\n  return (\n    <div>\n      <Dialog\n        style={{ zIndex: 99999999999 }}\n        open={isShowModal}\n        onClose={onCloseHandler}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogTitle id=\"form-dialog-title\">Add Seller</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Name\"\n            type=\"text\"\n            required\n            placeholder=\"Type your Name\"\n            onChange={onChangeHandler}\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"totalSales\"\n            label=\"Total Sales\"\n            type=\"number\"\n            placeholder=\"Type Your no. of Sales\"\n            fullWidth\n            onChange={onChangeHandler}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onCloseHandler} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={onConfirmHandler} color=\"primary\">\n            Add\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AddNodeModal;\n","import React, {\n  useState,\n  createContext,\n  useContext,\n  FC,\n  ReactNode\n} from \"react\";\nimport { Position, CRMContextType, Seller } from \"../types\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport AddNodeModal from \"../components/AddNodeModal\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  overlay: {\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    background: \"rgba(0,0,0,0.2)\",\n    position: \"fixed\",\n    zIndex: 200\n  },\n  mouseTail: {\n    fontSize: \"1.8rem\",\n    fontWeight: \"bold\",\n    position: \"absolute\",\n    top: ({ position }: any) => position && position.y - 25,\n    left: ({ position }: any) => position && position.x - 17,\n    cursor: \"default\"\n  },\n  appContainer: {\n    minHeight: \"100vh\",\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"auto\"\n  }\n}));\n\nconst CRMContext = createContext<any>(null);\n\nconst CRMProvider: FC<ReactNode> = ({ children }) => {\n  const [isShowOverLay, setIsShowOverlay] = useState<boolean>(false);\n  const [isShowModal, setIsShowModal] = useState<boolean>(false);\n  const [selectedNode, setSelectedNode] = useState<Seller | null>(null);\n  const [initNode, setInitNode] = useState<Seller>();\n  const [root, updateRoot] = useState<Seller>({\n    x: 0,\n    y: 0,\n    id: 0,\n    name: \"root\",\n    totalSales: 0,\n    children: [],\n    root: true,\n    inDirectProfits: 0,\n    totalProfits: 0\n  });\n\n  const [\n    selectedNodeToCalcChildrenProfitsID,\n    setSelectedNodeToCalcChildrenProfitsID\n  ] = useState<any>(0);\n\n  const [position, setPosition] = useState<Position>({\n    x: 0,\n    y: 0\n  });\n\n  const classes = useStyles({ position });\n\n  const overlayHadnler = () => {\n    setIsShowOverlay(!isShowOverLay);\n  };\n\n  const positionHandler = (e: React.MouseEvent) => {\n    setPosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  };\n\n  const addNode = (newNode: Seller) => {\n    const parent = selectedNode || root;\n    newNode.parentId = parent.id;\n    setInitNode(newNode);\n  };\n\n  return (\n    <CRMContext.Provider\n      value={{\n        position,\n        overlayHadnler,\n        isShowModal,\n        setIsShowModal,\n        isShowOverLay,\n        updateRoot,\n        setSelectedNode,\n        selectedNode,\n        initNode,\n        selectedNodeToCalcChildrenProfitsID,\n        setSelectedNodeToCalcChildrenProfitsID,\n        root\n      }}\n    >\n      <AddNodeModal addNode={addNode} />\n      <div onMouseMove={positionHandler} className={classes.appContainer}>\n        {isShowOverLay && (\n          <>\n            <div\n              className={classes.overlay}\n              onClick={e => {\n                e.stopPropagation();\n                setIsShowModal(true);\n              }}\n            />\n            <div className={classes.mouseTail}>+</div>\n          </>\n        )}\n        {children}\n      </div>\n    </CRMContext.Provider>\n  );\n};\n\nexport default CRMProvider;\n\nexport const useCRMContext = () => {\n  const {\n    overlayHadnler,\n    setIsShowModal,\n    isShowModal,\n    isShowOverLay,\n    updateRoot,\n    setSelectedNode,\n    selectedNode,\n    initNode,\n    selectedNodeToCalcChildrenProfitsID,\n    setSelectedNodeToCalcChildrenProfitsID,\n    root\n  } = useContext(CRMContext);\n\n  return {\n    overlayHadnler,\n    isShowModal,\n    setIsShowModal,\n    isShowOverLay,\n    updateRoot,\n    setSelectedNode,\n    selectedNode,\n    initNode,\n    selectedNodeToCalcChildrenProfitsID,\n    setSelectedNodeToCalcChildrenProfitsID,\n    root\n  } as CRMContextType;\n};\n\nexport const useMousePosition = () => {\n  const { position } = useContext(CRMContext);\n  return {\n    mousePosition: position as Position\n  };\n};\n","import React, { FC } from \"react\";\nimport { Tooltip, IconButton } from \"@material-ui/core\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { useCRMContext } from \"../../context/CRM\";\nimport { Seller } from \"../../types\";\n\nconst AddSubSellerButton: FC<{ node: Seller }> = ({ node }) => {\n  const { overlayHadnler, setSelectedNode } = useCRMContext();\n\n  const onClickHandler = (e: any) => {\n    overlayHadnler();\n    setSelectedNode(node);\n  };\n\n  return (\n    <Tooltip title=\"Add Sub-Seller\">\n      <IconButton\n        onClick={onClickHandler}\n        style={{\n          background: \"#5CBF87\",\n          width: \"32px\",\n          height: \"32px\",\n          color: \"white\"\n        }}\n      >\n        <AddCircleIcon />\n      </IconButton>\n    </Tooltip>\n  );\n};\n\nexport default AddSubSellerButton;\n","import React, { FC, forwardRef } from \"react\";\n\nconst ConnectionDot: FC<{ bottom?: boolean; ref?: any }> = forwardRef(\n  ({ bottom, ref }) => {\n    const pos = bottom ? { bottom: -10 } : { top: -10 };\n    return (\n      <div\n        ref={ref}\n        style={{\n          width: \"100%\",\n          height: \"20px\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          position: \"absolute\",\n          ...pos\n        }}\n      >\n        <div\n          style={{\n            width: \"12px\",\n            height: \"12px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"black\"\n          }}\n        />\n      </div>\n    );\n  }\n);\n\nexport default ConnectionDot;\n","export const sales = { COMMISIONS_RATE: 0.2, TICKET_PRICE: 100 };\n\nexport const dimensions = {\n  card: {\n    width: 250,\n    height: 250\n  }\n};\n\nexport const properties = {\n  X: \"x\",\n  Y: \"y\",\n  CHILDREN: \"children\",\n  TOTAL_SALES: \"totalSales\",\n  TOTAL_PROFITS: \"totalProfits\",\n  IN_DIRECT_PROFITS: \"inDirectProfits\"\n};\n\nexport const csvHeaders = [\n  \"Name\",\n  \"Total Sales\",\n  \"Direct Profits\",\n  \"Indirect Profits\",\n  \"Total Profits\"\n];\n","import React, { FC, useState, useEffect } from \"react\";\nimport { NodeType, Seller } from \"../../types\";\nimport Draggable from \"react-draggable\";\nimport { FormControl, makeStyles, Theme, TextField } from \"@material-ui/core\";\nimport SaveButton from \"./SaveButton\";\nimport EditButton from \"./EditButton\";\nimport AddSubSellerButton from \"./AddSubSellerButton\";\nimport ConnectionDot from \"./ConnentionDot\";\nimport { sales, dimensions, properties } from \"../../utils/utils\";\nimport { useCRMContext } from \"../../context/CRM\";\n\nconst { card } = dimensions;\nconst useStyles = makeStyles((theme: Theme) => ({\n  nodeRoot: {\n    boxShadow: \"0 0 8px 3px rgba(0,0,0,0.2)\",\n    height: `${card.height}px`,\n    width: `${card.width}px`,\n    position: \"absolute\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"white\",\n    cursor: \"grab\",\n    zIndex: 700,\n    \"&:active\": {\n      cursor: \"grabbing\",\n      zIndex: 10000000\n    }\n  },\n\n  totalSalesInput: {\n    height: \"40px\"\n  },\n  controllersContainer: {\n    flex: 1,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"relative\",\n    width: \"100%\"\n  },\n  controllersInnerContainer: {\n    width: \"50%\",\n    display: \"flex\",\n    justifyContent: \"space-around\"\n  },\n  addSellerWrapper: {\n    position: \"absolute\",\n    right: -10,\n    width: \"20px\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  },\n  input: {\n    height: \"40px\"\n  },\n  field: {\n    height: \"25px\",\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\"\n  }\n}));\n\nconst Node: FC<NodeType> = ({ node }) => {\n  const classes = useStyles();\n  const [isEdit, setIsEdit] = useState<boolean>(false);\n  const [seller, setSeller] = useState<Seller>({ ...node });\n  const [inDirectProfits, setInDirectProfits] = useState<number>(0);\n  const [directProfits, setDirectProfits] = useState<number>(\n    node.totalSales * sales.TICKET_PRICE\n  );\n  const [totalProfits, setTotalProfits] = useState<number>(0);\n\n  const {\n    initNode,\n    selectedNodeToCalcChildrenProfitsID,\n    setSelectedNodeToCalcChildrenProfitsID\n  } = useCRMContext();\n\n  //----------------------------------------------------------------------------------------------------//\n  // Base case is, That total profits are equal to direct profits, hence in-direct profits are equal to\n  // direct profits * comission rate.\n  // from there on, in-direct profits are equal to child's total profits * comission rate\n  //----------------------------------------------------------------------------------------------------//\n\n  //* direct profits - profits that comes from direct selling tickets\n  //* in direct profits are profits from all the children\n\n  // update  node's direct profits inner state\n  useEffect(() => {\n    setDirectProfits(node.totalSales * sales.TICKET_PRICE);\n  }, [node.totalSales]);\n\n  // update  node's in-direct profits inner state\n  useEffect(() => {\n    setInDirectProfits(node.inDirectProfits);\n    //eslint-disable-next-line\n  }, [node.inDirectProfits]);\n\n  // update root with node's total profit and set selected node to propagate in-direct profits calculations\n  useEffect(() => {\n    setTotalProfits(directProfits + inDirectProfits);\n    onChildrenChangeHandler(\n      node,\n      properties.TOTAL_PROFITS,\n      directProfits + inDirectProfits\n    );\n    //eslint-disable-next-line\n  }, [inDirectProfits, directProfits]);\n\n  // update root with node's new child\n  useEffect(() => {\n    onChildrenChangeHandler(node, properties.CHILDREN, initNode);\n    setSelectedNodeToCalcChildrenProfitsID(initNode?.id);\n    //eslint-disable-next-line\n  }, [initNode]);\n\n  // propagate in-direct profits calculations\n  useEffect(() => {\n    if (selectedNodeToCalcChildrenProfitsID === node.id) {\n      const sum = node.children.reduce((acc, child) => {\n        return acc + child.totalProfits * sales.COMMISIONS_RATE;\n      }, 0);\n\n      setInDirectProfits(sum);\n      setSelectedNodeToCalcChildrenProfitsID(node.parentId as number);\n      onChildrenChangeHandler(node, properties.IN_DIRECT_PROFITS, sum);\n    }\n    //eslint-disable-next-line\n  }, [selectedNodeToCalcChildrenProfitsID]);\n\n  //\n  // ------ Events ------ //\n  //\n  const onDrag = (e: any, data: any) => {\n    onChildrenChangeHandler(node, properties.X, data.lastX);\n    onChildrenChangeHandler(node, properties.Y, data.lastY);\n  };\n\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = e.target;\n    setSeller(prevState => ({\n      ...prevState,\n      [id]: value\n    }));\n    setSelectedNodeToCalcChildrenProfitsID(node.id);\n    setDirectProfits(Number(value) * sales.TICKET_PRICE);\n    onChildrenChangeHandler(node, properties.TOTAL_SALES, value);\n  };\n\n  const onSaveHandler = () => {\n    if (seller.totalSales >= 0) {\n      setIsEdit(!isEdit);\n    }\n  };\n\n  const onBlur = () => {\n    onSaveHandler();\n  };\n\n  const onEditHandler = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const onChildrenChangeHandler = (node: any, property: any, value: any) => {\n    switch (property) {\n      case properties.CHILDREN:\n        if (value?.parentId === node.id) {\n          node.children.push(value);\n        }\n        break;\n      case properties.TOTAL_PROFITS:\n        if (typeof value === \"number\") {\n          node[properties.TOTAL_PROFITS] = value;\n        }\n        break;\n      case properties.IN_DIRECT_PROFITS:\n        if (typeof value === \"number\") {\n          node[properties.IN_DIRECT_PROFITS] = value;\n        }\n        break;\n      case properties.X:\n        node[properties.X] = value;\n        break;\n      case properties.Y:\n        node[properties.Y] = value;\n        break;\n      case properties.TOTAL_SALES:\n        node[properties.TOTAL_SALES] = value;\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      {!node.root && (\n        <Draggable\n          axis=\"both\"\n          defaultPosition={{\n            x: node?.x,\n            y: node?.y\n          }}\n          onDrag={onDrag}\n        >\n          <div\n            className={classes.nodeRoot}\n            onClick={e => {\n              e.stopPropagation();\n            }}\n          >\n            {node.parentId ? <ConnectionDot /> : \"\"}\n            <FormControl style={{ paddingTop: \"1rem\" }}>\n              {seller.name}\n\n              <TextField\n                style={{ marginTop: \"1rem\" }}\n                disabled={!isEdit}\n                variant=\"outlined\"\n                id=\"totalSales\"\n                type=\"number\"\n                label=\"Total Sales\"\n                placeholder=\"Type no. of sales\"\n                value={seller?.totalSales}\n                onBlur={onBlur}\n                inputProps={{\n                  min: 0,\n                  classes: { input: classes.input },\n                  style: { height: \"40px\", padding: \"0 0 0 0.5rem\" }\n                }}\n                onChange={onChangeHandler}\n              />\n              <div style={{ flex: 2 }}>\n                <div className={classes.field}>\n                  {`Direct Profits : ${directProfits.toLocaleString(\"en\")}`}\n                </div>\n                <div className={classes.field}>\n                  {`In-Direct Profits : ${inDirectProfits.toLocaleString(\n                    \"en\"\n                  )}`}\n                </div>\n                <div\n                  style={{ fontWeight: \"bold\" }}\n                  className={classes.field}\n                >{`Total Profits : ${Number(totalProfits).toLocaleString(\n                  \"en\"\n                )}`}</div>\n              </div>\n            </FormControl>\n            <div className={classes.controllersContainer}>\n              <div className={classes.controllersInnerContainer}>\n                {(isEdit && <SaveButton {...{ onSaveHandler }} />) || (\n                  <EditButton onClick={onEditHandler} />\n                )}\n                <AddSubSellerButton node={seller} />\n              </div>\n            </div>\n            <ConnectionDot bottom={true} />\n          </div>\n        </Draggable>\n      )}\n      {node?.children?.map(child => {\n        return (\n          <>\n            {!node.root ? (\n              <svg\n                viewBox=\"100% 100%\"\n                style={{\n                  height: \"100%\",\n                  width: \"100%\",\n                  position: \"fixed\",\n                  zIndex: 1,\n                  top: 0,\n                  left: 0\n                }}\n              >\n                <path\n                  d={`M${node?.x + card.width / 2},${node.y + card.height} L${\n                    child?.x + card.width / 2\n                  },${child.y}`}\n                  style={{\n                    stroke: \"black\",\n                    strokeWidth: 2,\n                    fill: \"none\"\n                  }}\n                />\n              </svg>\n            ) : (\n              \"\"\n            )}\n            <Node\n              node={child}\n              onNodeChange={(node: Seller, property: string, value: any) =>\n                onChildrenChangeHandler(node, property, value)\n              }\n            />\n          </>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Node;\n","import React, { FC, useState } from \"react\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport { Tooltip, IconButton } from \"@material-ui/core\";\nimport { CSVLink } from \"react-csv\";\n\nconst ExportCSV: FC<{ fetchCSVData: () => Promise<any> }> = ({\n  fetchCSVData\n}) => {\n  const [data, setData] = useState<any>([[]]);\n  const onClickHandler = async () => {\n    const res = await fetchCSVData();\n    setData(res);\n  };\n\n  return (\n    <CSVLink data={data} onClick={onClickHandler}>\n      <Tooltip title=\"Export to CSV\">\n        <IconButton\n          style={{\n            background: \"#2912B0\",\n            height: \"64px\",\n            width: \"64px\",\n            marginRight: \"0.5rem\",\n            color: \"white\"\n          }}\n        >\n          <DescriptionIcon style={{ fontSize: \"2rem\" }} />\n        </IconButton>\n      </Tooltip>\n    </CSVLink>\n  );\n};\n\nexport default ExportCSV;\n","import React from \"react\";\nimport Node from \"../components/node/Node\";\nimport { useCRMContext } from \"../context/CRM\";\nimport { Button, makeStyles, Theme } from \"@material-ui/core\";\nimport { Seller } from \"../types\";\nimport ExportCSV from \"../components/node/ExportCSV\";\nimport { sales, csvHeaders } from \"../utils/utils\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  home: {\n    height: \"100%\",\n    width: \"100%\",\n    position: \"relative\"\n  },\n  addSellerButton: {\n    position: \"fixed\",\n    top: 30,\n    right: 30,\n    zIndex: 99999\n  }\n}));\n\nconst Home = () => {\n  const {\n    overlayHadnler,\n    root,\n    updateRoot,\n    setSelectedNode,\n    setSelectedNodeToCalcChildrenProfitsID\n  } = useCRMContext();\n  const classes = useStyles();\n\n  const onAddSellerClickHandler = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    console.log(root);\n    setSelectedNodeToCalcChildrenProfitsID(root.id);\n    setSelectedNode(root);\n    overlayHadnler();\n  };\n\n  const createCSV = (): Promise<any> => {\n    let csvData: any = [csvHeaders];\n    try {\n      const assemble = (root: Seller) => {\n        root.children.forEach(child => {\n          const childInfo: any = [\n            child.name,\n            child.totalSales,\n            child.totalSales * sales.TICKET_PRICE,\n            child.inDirectProfits,\n            child.totalProfits\n          ];\n          csvData.push(childInfo);\n          if (child.children.length) assemble(child);\n        });\n      };\n      assemble(root);\n      return csvData;\n    } catch (err) {\n      return err;\n    }\n  };\n\n  return (\n    <>\n      <div className={classes.home}>\n        <div className={classes.addSellerButton}>\n          <ExportCSV fetchCSVData={createCSV} />\n          <Button\n            style={{ background: \"orange\", width: \"80px\" }}\n            onClick={onAddSellerClickHandler}\n          >\n            Add Seller\n          </Button>\n        </div>\n        <Node node={root} onNodeChange={(state: Seller) => updateRoot(state)} />\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./containers/Home\";\nimport CRMProvider from \"./context/CRM\";\n\nfunction App() {\n  return (\n    <CRMProvider>\n      <div className=\"App\">\n        <Home />\n      </div>\n    </CRMProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}